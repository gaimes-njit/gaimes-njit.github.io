Title: Tetris-like Alphabet Structures

Introduction:

Imagine a fascinating Tetris-like game that challenges players to create stable structures resembling the 26 capital letters of the English alphabet. In this game, players use three types of blocks to construct these letter-shaped structures:

1. `b11`: A square block with a width and height of 1 unit.
2. `b31`: A horizontal block with a width of 3 units and a height of 1 unit.
3. `b13`: A vertical block with a width of 1 unit and a height of 3 units.

The Grid:

The game takes place on a 2D grid with specific dimensions:

- Width: The map's width is equally divided into 20 slots, numbered from 0 to 19.
- Height: The map's height is equally divided into 16 layers, with layers 0 and 15 representing the bottom and top layers, respectively.
- Base: The bottom layer (layer 0) acts as the base of the structure.

Objective:

The goal of the game is to use the provided block types (`b11`, `b31`, and `b13`) to build stable structures that accurately represent the 26 capital letters of the English alphabet.

The `ab_drop()` Function:

To construct the structures, players can use the `ab_drop()` function, which allows them to drop a block vertically from the top and center it at a specific slot, denoted by `x_position`. The `ab_drop()` function works based on the following settings:

- The function accepts two parameters: `block_type` and `x_position`.
- `block_type`: Represents the type of block to be placed (`b11`, `b31`, or `b13`).
- `x_position`: Specifies the horizontal index of a grid cell where 0 represents the leftmost column, and 19 represents the rightmost column.

Constraints:

To ensure the stability and aesthetics of the structures, players must adhere to the following constraints:

1. Stability: This is a hard constraint. Each block must be placed in such a way that the structure remains stable and does not collapse due to gravity. Poor weight distribution caused by incorrect block placement may lead to structural collapse.
2. No Boundary Intrusion: This is a soft constraint. Blocks should not extend beyond the boundaries of the map. In other words, the area of intrusion regions should be minimized or ideally zero.

Examples:

Here are some examples of perfect structures representing different letters:

1. Letter "A":
   ```
   ab_drop('b11', 1)
   ab_drop('b11', 3)
   ab_drop('b11', 1)
   ab_drop('b11', 3)
   ab_drop('b31', 2)
   ab_drop('b11', 1)
   ab_drop('b11', 3)
   ab_drop('b31', 2)
   ```

2. Letter "H":
   ```
   ab_drop('b11', 1)
   ab_drop('b11', 3)
   ab_drop('b31', 2)
   ab_drop('b11', 1)
   ab_drop('b11', 3)
   ```

3. Letter "I"
   ```
   ab_drop('b31', 2)
   ab_drop('b13', 2)
   ab_drop('b31', 2)
   ```

4. Letter "J"
   ```
   ab_drop('b31', 2)
   ab_drop('b11', 1)
   ab_drop('b13', 3)
   ab_drop('b31', 3)
   ```

5. Letter "L"
   ```
   ab_drop('b31', 2)
   ab_drop('b13', 1)
   ```

6. Letter "O":
   ```
   ab_drop('b31', 2)
   ab_drop('b11', 1)
   ab_drop('b11', 1)
   ab_drop('b11', 3)
   ab_drop('b11', 3)
   ab_drop('b31', 2)
   ```

7. Letter "T"
   ```
   ab_drop('b13', 2)
   ab_drop('b31', 2)
   ```

8. Letter "U"
   ```
   ab_drop('b31', 2)
   ab_drop('b13', 1)
   ab_drop('b13', 3)
   ```

Your Task:

Your challenge is to use the `ab_drop()` function to vertically drop blocks and create stable structures for the capital letter <OBJECT>. Aim to meet the goal while satisfying the hard constraints of stability and minimizing boundary intrusion.

Note:

Some structures may have multiple valid solutions. Creativity and strategic placement of blocks can lead to interesting and visually appealing structures.

Output:

- Give the output using only the `ab_drop()` function in the same as the example format.
- The code block in the output must contain only 1 block of code.
- No visualization
