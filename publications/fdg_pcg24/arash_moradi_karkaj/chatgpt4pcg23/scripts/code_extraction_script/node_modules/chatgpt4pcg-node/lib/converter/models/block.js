"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Block = exports.BlockType = void 0;
const position_1 = require("./position");
const size_1 = require("./size");
/**
 * BlockType
 * @enum {string}
 * @property {string} B31 - 3x1 block
 * @property {string} B13 - 1x3 block
 * @property {string} B11 - 1x1 block
 */
var BlockType;
(function (BlockType) {
    BlockType[BlockType["B31"] = 0] = "B31";
    BlockType[BlockType["B13"] = 1] = "B13";
    BlockType[BlockType["B11"] = 2] = "B11";
})(BlockType = exports.BlockType || (exports.BlockType = {}));
/**
 * Block
 * @class
 * @property {string} id - block id
 * @property {string} type - block type
 * @property {number} rotation - block rotation between 0 and 360
 * @property {Position} position - block position
 * @property {Size} size - block size
 */
class Block {
    constructor(id, type, rotation) {
        this.id = id;
        this.type = type;
        this.rotation = rotation;
        this.position = new position_1.Position();
        this.size = Block.getBlockSize(BlockType[id.toUpperCase()]);
    }
    /**
     * This function is used to get the available block based on the block type
     * @param type block type
     * @returns the block instance based on the block type
     */
    static getAvailableBlock(type) {
        if (type === BlockType.B31) {
            return new Block('b31', 'RectSmall', 0);
        }
        else if (type === BlockType.B13) {
            return new Block('b13', 'RectSmall', 90);
        }
        else if (type === BlockType.B11) {
            return new Block('b11', 'SquareTiny', 0);
        }
        throw new Error(`BlockType does not exist.`);
    }
    /**
     * This function is used to get the block size based on the block type
     * @param type block type
     * @returns the block size based on the block type
     */
    static getBlockSize(type) {
        if (type === BlockType.B31) {
            return new size_1.Size(3, 1);
        }
        else if (type === BlockType.B13) {
            return new size_1.Size(1, 3);
        }
        else if (type === BlockType.B11) {
            return new size_1.Size(1, 1);
        }
        throw new Error(`BlockType does not exist.`);
    }
}
exports.Block = Block;
