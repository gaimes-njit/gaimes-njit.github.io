export type STAGE = "qualified" | "raw" | "intermediate" | "levels" | "images" | "stability" | "similarity" | "result";
export declare const RESULT_FOLDER_NAME = "result";
export declare const LOG_FOLDER_NAME = "logs";
/**
 * This function will parse source folder arguments from the command line
 * @returns a path to the source folder
 */
export declare function parseSourceFolderArgument(): string;
/**
 * This function will list all directories in the source folder
 * @param sourceFolderPath is a target folder to list all directories
 * @returns a list of directories
 */
export declare function listAllDirs(sourceFolderPath: string): Promise<string[]>;
/**
 * This function will list all files in the source folder
 * @param sourceFolderPath is a target folder to list all files
 * @returns a list of files
 */
export declare function listAllFiles(sourceFolderPath: string): Promise<string[]>;
/**
 * This function will list all characters (folder names) in the source folder
 * @param sourceFolderPath is a target folder to list all characters
 * @param stage is a stage name.
 * @returns a list of characters
 */
export declare function listCharactersDirs(sourceFolderPath: string, stage: STAGE): Promise<string[]>;
/**
 * This function will create output folders in the same structure as the source folder
 * @param sourceFolderPath is a path to the source folder
 * @param outputFolderName is a name of the output folder
 * @param stage is a stage name
 * @returns a path to the output folder
 */
export declare function createOutputFolder(sourceFolderPath: string, outputFolderName: string, stage: STAGE): Promise<string>;
/**
 * This function will create a result folder in the source folder
 * @param sourceFolderPath is a path to the source folder
 * @returns a path to the result folder
 */
export declare function createResultOutputFolder(sourceFolderPath: string): Promise<string>;
/**
 * This function will create a log folder in the same structure as the source folder
 * @param sourceFolderPath is a path to the source folder
 * @returns a path to the log folder
 */
export declare function createLogFolder(sourceFolderPath: string): Promise<string>;
/**
 * This function will append a log to the log file and print it to the console
 * @param logFolderPath is a path to the log folder
 * @param stage is a stage name
 * @param log is a log message
 */
export declare function appendLog(logFolderPath: string, stage: STAGE, log: string): Promise<void>;
