"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.convertToXML = void 0;
const converter_1 = require("./converter");
const bignumber_js_1 = __importDefault(require("bignumber.js"));
function convertToXML(functionsString) {
    let output = '<?xml version="1.0" encoding="utf-16"?>\n';
    const [gameObjectsXMLString, grid] = parseGameObjects(functionsString);
    const levelWidth = (0, converter_1.getGridContentWidth)(grid);
    const levelHeight = (0, converter_1.getGridContentHeight)(grid);
    const levelXMLString = parseLevel(levelWidth);
    const cameraXMLString = parseCamera(levelWidth, levelHeight);
    const birdsXMLString = parseBirds();
    const slingshotXMLString = parseSlingshot();
    output += levelXMLString;
    output += cameraXMLString;
    output += birdsXMLString;
    output += slingshotXMLString;
    output += gameObjectsXMLString;
    output += `</Level>`;
    return output;
}
exports.convertToXML = convertToXML;
function parseGameObjects(functionsString) {
    let xmlString = '';
    xmlString += `  <GameObjects>\n`;
    const [tempBlocks, gridBeforeShift] = (0, converter_1.getBlocksWithPosition)(functionsString);
    const [blocks, grid] = (0, converter_1.shiftBlocksOnGrid)(tempBlocks, gridBeforeShift);
    for (const block of blocks) {
        const blockWidth = new bignumber_js_1.default(block.size.width);
        const blockHeight = new bignumber_js_1.default(block.size.height);
        const xBlockCenter = blockWidth.multipliedBy(converter_1.ONE_CELL_WIDTH_IN_UNITY).dividedBy(2);
        const yBlockCenter = blockHeight.multipliedBy(converter_1.ONE_CELL_WIDTH_IN_UNITY).dividedBy(2);
        const MAGIC = block.size.width > 1 ? converter_1.ONE_CELL_WIDTH_IN_UNITY : new bignumber_js_1.default('0');
        const xPosition = block.position.x
            .multipliedBy(converter_1.ONE_CELL_WIDTH_IN_UNITY)
            .plus(xBlockCenter)
            .plus(converter_1.STRUCTURE_STARTING_POSITION.x)
            .minus(MAGIC);
        const yPosition = block.position.y
            .multipliedBy(converter_1.ONE_CELL_WIDTH_IN_UNITY)
            .plus(yBlockCenter)
            .plus(converter_1.STRUCTURE_STARTING_POSITION.y);
        xmlString += `    <Block type="${block.type}" material="wood" x="${xPosition.toFixed()}" y="${yPosition.toFixed()}" rotation="${block.rotation}" />\n`;
    }
    xmlString += `  </GameObjects>\n`;
    return [xmlString, grid, gridBeforeShift];
}
function parseBirds() {
    return '  <Birds>\n    <Bird type="BirdRed" />\n  </Birds>\n';
}
function parseSlingshot() {
    const SLINGSHOT_POSITION = { x: -9, y: -2.5 };
    return `  <Slingshot x="${SLINGSHOT_POSITION.x}" y="${SLINGSHOT_POSITION.y}" />\n`;
}
function parseLevel(levelWidth) {
    return `<Level width="${parseInt(levelWidth.dividedBy(converter_1.LEVEL_WIDTH_IN_UNITY).toFixed()) + 3}">\n`;
}
function parseCamera(levelWidth, levelHeight) {
    const CAMERA_ASPECT_RATIO = new bignumber_js_1.default('1.6');
    const MAX_ZOOM_LEVEL = new bignumber_js_1.default('5');
    const rawCameraSize = bignumber_js_1.default.max(levelHeight.multipliedBy(CAMERA_ASPECT_RATIO), levelWidth).multipliedBy(2);
    const cameraSize = bignumber_js_1.default.max(rawCameraSize, 17);
    const cameraMinWidth = cameraSize;
    const cameraMaxWidth = cameraSize.plus(MAX_ZOOM_LEVEL);
    return `  <Camera x="${converter_1.STRUCTURE_STARTING_POSITION.x.toFixed()}" y="0" minWidth="${cameraMinWidth.toFixed()}" maxWidth="${cameraMaxWidth.toFixed()}" />\n`;
}
