```python
# Initialize the field
field = [[0]*20 for _ in range(16)]

# Function to check if a cell is occupied
def is_occupied(x, y):
    return field[y][x] == 1

# Function to check if a brick is stable
def is_stable(x, y, brick):
    if brick == 'b31':
        # Check stability for b31 brick
        pivot_x = x + 1
        pivot_y = y + 1
        left_count = 0
        right_count = 0
        for i in range(3):
            for j in range(3):
                if i == pivot_y and j == pivot_x:  # Skip the pivot cell
                    continue
                if j < pivot_x and is_occupied(x + j, y + i):
                    left_count += 1
                elif j > pivot_x and is_occupied(x + j, y + i):
                    right_count += 1
        if left_count != right_count:
            return False
    elif brick == 'b13':
        # Check stability for b13 brick
        pivot_x = x
        pivot_y = y + 1
        above_count = 0
        below_count = 0
        for i in range(3):
            for j in range(3):
                if i == pivot_y and j == pivot_x:  # Skip the pivot cell
                    continue
                if i > pivot_y and is_occupied(x + j, y + i):
                    above_count += 1
                elif i < pivot_y and is_occupied(x + j, y + i):
                    below_count += 1
        if above_count != below_count:
            return False
    return True

# Function to drop a brick
def ab_drop(brick, x_position):
    if brick == 'b31':
        # Check if b31 brick can be placed
        if x_position < 0 or x_position + 2 >= 20:
            return
        for i in range(3):
            if is_occupied(x_position + i, 0):
                return
        # Find the drop position
        y = 0
        while y + 2 < 16 and not is_occupied(x_position, y + 1) and not is_occupied(x_position + 1, y + 1) and not is_occupied(x_position + 2, y + 1):
            y += 1
        # Place the brick
        for i in range(3):
            field[y+i][x_position+i] = 1
    elif brick == 'b13':
        # Check if b13 brick can be placed
        if x_position < 0 or x_position >= 20:
            return
        for i in range(3):
            if is_occupied(x_position, 0):
                return
        # Find the drop position
        y = 0
        while y + 3 < 16 and not is_occupied(x_position, y + 1) and not is_occupied(x_position, y + 2) and not is_occupied(x_position, y + 3):
            y += 1
        # Place the brick
        for i in range(3):
            field[y+i][x_position] = 1

# Generate the D-shaped structure
ab_drop('b31', 5)
ab_drop('b13', 5)
ab_drop('b11', 8)
ab_drop('b11', 9)
ab_drop('b11', 10)
ab_drop('b11', 11)
ab_drop('b11', 12)
ab_drop('b11', 13)
ab_drop('b31', 14)
ab_drop('b13', 14)

# Print the resulting field
for row in field:
    print(row)
```

The resulting structure will look like this:

```
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0]
[0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0]
[0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0]
[0, 0, 0, 1, 0, 0, 0, 0, 0