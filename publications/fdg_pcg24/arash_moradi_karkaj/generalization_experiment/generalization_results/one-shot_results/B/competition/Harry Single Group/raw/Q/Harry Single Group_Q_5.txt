First, let's initialize our map with all cells set as empty:

```python
field = [[0 for _ in range(20)] for _ in range(16)]
```

Now we can start generating the "Q" shape using the `ab_drop()` function. We will follow these steps:

1. Place the b13 brick at the bottom-left corner of the field.
2. Place the b31 brick above the b13 brick.
3. Place the b11 brick to complete the "Q" shape.

Here is the code to generate the "Q" shape:

```python
# Place b13 brick
ab_drop('b13', 0)

# Place b31 brick
ab_drop('b31', 1)

# Place b11 brick
ab_drop('b11', 2)
```

Now let's take into account the stability and boundary collision rules. We need to modify the `ab_drop()` function to check for stability and boundary collisions before placing a brick. Here is the modified function:

```python
def ab_drop(x, y):
    if x == 'b31':
        width = 3
        height = 1
    elif x == 'b13':
        width = 1
        height = 3
    else:
        width = 1
        height = 1

    # Check if the brick will collide with a previously placed brick or exceed boundaries
    for i in range(height):
        for j in range(width):
            if y + j >= 20 or field[i][y + j] == 1:
                # Collision or boundary exceeded, stop the brick
                return

    # Place the brick on the field
    for i in range(height):
        for j in range(width):
            field[i][y + j] = 1
```

Now we can use the modified `ab_drop()` function to generate the "Q" shape:

```python
# Place b13 brick
ab_drop('b13', 0)

# Place b31 brick
ab_drop('b31', 1)

# Place b11 brick
ab_drop('b11', 2)
```

The resulting field will have the shape resembling the letter "Q" with occupied cells marked as 1.