Here is one possible solution to generate the letter "V" shape using the ab_drop() function:

```python
# Map initialization
map = [[0] * 20 for _ in range(16)]

# Function to check if a position is valid and not occupied
def is_valid_position(x, y):
    if x < 0 or x >= 20 or y < 0 or y >= 16:
        return False
    if map[y][x] == 1:
        return False
    return True

# Function to update the map with the placed bricks
def update_map(x, y, brick):
    for i in range(brick[1]):
        for j in range(brick[0]):
            map[y+i][x+j] = 1

# Function to check stability of the bricks
def check_stability():
    for y in range(1, 16):
        for x in range(1, 19):
            if map[y][x] == 1:
                # Check if the brick is stable
                if map[y][x-1] != map[y][x+1]:
                    return False
    return True

# Function to drop a brick using the ab_drop() function and update the map
def drop_and_update(brick, x_position):
    result = ab_drop(brick, x_position)
    x = result[0]
    y = result[1]
    update_map(x, y, bricks[brick])

# Available bricks
bricks = {'b31': (3, 1), 'b13': (1, 3), 'b11': (1, 1)}

# Generate the letter "V" shape
ab_drop('b13', 7)  # Drop the first vertical brick on position x = 7
ab_drop('b31', 6)  # Drop the horizontal brick on position x = 6
ab_drop('b13', 8)  # Drop the second vertical brick on position x = 8

# Check stability of the bricks
if not check_stability():
    # If the structure is unstable, undo the last drop and try again
    map = [[0] * 20 for _ in range(16)]
    drop_and_update('b31', 6)
    drop_and_update('b13', 7)
    drop_and_update('b13', 8)

# Output the final map
for row in reversed(map):
    row_str = ''
    for cell in row:
        row_str += '#' if cell == 1 else '.'
    print(row_str)
```

The output will be a representation of the final map with '#' representing occupied cells by the bricks and '.' representing empty cells:

```
....................
.......#.......#....
.......#.......#....
.......#...############
........................
........................
........................
........................
........................
........................
........................
........................
........................
........................
........................
........................
```