```python
# Step 1: Initialize the field
field = [[0] * 20 for _ in range(16)]
occupied_cells = set()

# Step 2: Define helper functions
def is_cell_occupied(x, y):
    return (x, y) in occupied_cells

def check_stability(x, y, width, height):
    left_side = 0
    right_side = 0

    for i in range(x):
        for j in range(y, y + height):
            if is_cell_occupied(i, j):
                left_side += 1
                break

    for i in range(x + width, 20):
        for j in range(y, y + height):
            if is_cell_occupied(i, j):
                right_side += 1
                break

    return left_side == right_side

def ab_drop(x, y):
    if x == 'b31':
        width = 3
        height = 1
    elif x == 'b13':
        width = 1
        height = 3
    elif x == 'b11':
        width = 1
        height = 1
    else:
        return

    # Check if the brick can be placed within the field
    if y < 0 or y + width > 20 or height > 16:
        return

    # Check if any of the cells are occupied by previously placed bricks
    for i in range(y, y + width):
        for j in range(height):
            if is_cell_occupied(i, j):
                return

    # Drop the brick from the top until it reaches the ground
    landing_y = 0
    while landing_y + height <= 15:
        for i in range(y, y + width):
            if is_cell_occupied(i, landing_y + height):
                break
        else:
            landing_y += 1
            continue
        break

    # Update the field and occupied_cells
    for i in range(y, y + width):
        for j in range(landing_y, landing_y + height):
            field[j][i] = 1
            occupied_cells.add((i, j))

    return

# Step 3: Generate the required structure
ab_drop('b31', 5)
ab_drop('b13', 5)
ab_drop('b31', 12)
ab_drop('b11', 13)
ab_drop('b11', 14)
ab_drop('b31', 15)
ab_drop('b13', 15)

# Step 4: Print the field
for row in field:
    print(row)
```

Output:
```
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 