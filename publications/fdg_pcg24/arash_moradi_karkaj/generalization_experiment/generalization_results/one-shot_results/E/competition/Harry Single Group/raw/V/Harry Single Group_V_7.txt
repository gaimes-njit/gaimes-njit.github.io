To generate the letter "V" shape using the available props and following the important notes, we can use the following code:

```
# Initialize the field with all cells empty
field = [[0 for _ in range(20)] for _ in range(16)]

# Helper function to check if a cell is occupied
def is_occupied(x, y):
    if y >= 0 and y < 16 and x >= 0 and x < 20:
        return field[y][x] == 1
    return False

# Function to place a brick on the field
def place_brick(x, y, brick):
    if brick == 'b31':
        # Check if the brick exceeds the boundaries of the field
        if x - 1 < 0 or x + 1 >= 20:
            return False
        # Check if the cells below the brick are empty
        if is_occupied(x - 1, y - 1) or is_occupied(x, y - 1) or is_occupied(x + 1, y - 1):
            return False
        # Check if the cells below and to the sides of the brick are empty
        if is_occupied(x - 1, y) or is_occupied(x + 1, y):
            return False
        # Place the brick on the field
        field[y - 1][x - 1] = 1
        field[y - 1][x] = 1
        field[y - 1][x + 1] = 1
        field[y][x] = 1
        field[y + 1][x] = 1
        return True
    elif brick == 'b13':
        # Check if the brick exceeds the boundaries of the field
        if x < 0 or x >= 20:
            return False
        # Check if the cells below the brick are empty
        if is_occupied(x, y - 1):
            return False
        # Check if the cells below and to the sides of the brick are empty
        if is_occupied(x - 1, y) or is_occupied(x + 1, y) or is_occupied(x, y - 2):
            return False
        # Place the brick on the field
        field[y][x] = 1
        field[y + 1][x] = 1
        field[y + 2][x] = 1
        return True
    elif brick == 'b11':
        # Check if the brick exceeds the boundaries of the field
        if x < 0 or x >= 20:
            return False
        # Check if the cells below the brick are empty
        if is_occupied(x, y - 1):
            return False
        # Place the brick on the field
        field[y][x] = 1
        return True
    else:
        return False

# Function to drop a brick and check stability
def ab_drop(x, y):
    if x == 'b13':
        for i in range(16):
            if place_brick(y, i, 'b13'):
                return
    elif x == 'b31':
        for i in range(16):
            if place_brick(y, i, 'b31'):
                return

# Generate the letter "V" shape
ab_drop('b31', 9)
ab_drop('b13', 9)
ab_drop('b31', 10)
ab_drop('b13', 10)
ab_drop('b31', 11)
ab_drop('b13', 11)
ab_drop('b13', 12)
```

This code will generate a shape resembling the letter "V" using the available props. The `place_brick` function checks if a brick can be placed at a specific x and y position, taking into account the boundaries of the field and the cells below and to the sides of the brick. The `ab_drop` function drops the brick from the top of the field towards the ground, checking if any cells in the current position are already occupied. The `is_occupied` function checks if a specific cell is already occupied.