To generate the shape resembling the letter "A" using the given props and functions, we need to carefully place each brick and ensure stability and boundary collisions.

Here is the code to generate the required structure:

```python
# map initialization
field = [[0]*20 for _ in range(16)]

# function to check if a cell is occupied
def is_occupied(x, y):
    if x < 0 or x >= 20 or y < 0 or y >= 16:
        return False
    return field[y][x] == 1

# function to place a brick on the field
def place_brick(brick_type, x_position):
    if brick_type == 'b31':
        # Check if there is enough space to place the brick
        if x_position < 0 or x_position + 2 >= 20:
            return
        # Check stability and collision
        if is_occupied(x_position, 0) or is_occupied(x_position+1, 0) or is_occupied(x_position+2, 0):
            return
        if not (is_occupied(x_position, 1) and is_occupied(x_position+2, 1)):
            return
        # Place the brick
        field[0][x_position] = 1
        field[0][x_position+1] = 1
        field[0][x_position+2] = 1
        field[1][x_position] = 1
        field[1][x_position+2] = 1
        field[2][x_position] = 1
        field[2][x_position+2] = 1
    elif brick_type == 'b13':
        # Check if there is enough space to place the brick
        if x_position < 0 or x_position + 2 >= 20:
            return
        # Check stability and collision
        if is_occupied(x_position, 0) or is_occupied(x_position, 1) or is_occupied(x_position, 2):
            return
        if not (is_occupied(x_position-1, 1) and is_occupied(x_position+1, 1)):
            return
        # Place the brick
        field[0][x_position] = 1
        field[1][x_position] = 1
        field[2][x_position] = 1
        field[1][x_position-1] = 1
        field[1][x_position+1] = 1
    elif brick_type == 'b11':
        # Check if there is enough space to place the brick
        if x_position < 0 or x_position >= 20:
            return
        # Check stability and collision
        if is_occupied(x_position, 0):
            return
        if not (is_occupied(x_position, 1)):
            return
        # Place the brick
        field[0][x_position] = 1
        field[1][x_position] = 1

# Place the bricks to form the letter "A"
ab_drop('b13', 8)
ab_drop('b31', 6)
ab_drop('b13', 11)
```

In this code, we initialize a 2D list, `field`, to represent the field and set all cells to 0 initially (empty). We also define the function `is_occupied()` to check if a cell is occupied by a placed brick.

The `place_brick()` function is used to place each brick according to the given type and x_position. It first checks if there is enough space and then checks stability and collision conditions before placing the brick by setting the corresponding cells in the `field` list to 1.

Finally, we use the `ab_drop()` function to drop the bricks in the desired sequence to form the letter "A" shape. We drop 'b13' at x_position 8, 'b31' at x_position 6, and 'b13' again at x_position 11.

Note: This code assumes that there are no other constraints or conditions not mentioned in the problem statement.