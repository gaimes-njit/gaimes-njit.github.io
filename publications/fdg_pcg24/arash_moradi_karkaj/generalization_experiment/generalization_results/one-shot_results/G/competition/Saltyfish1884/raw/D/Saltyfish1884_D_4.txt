To generate a stable structure that resembles the character "D" while meeting all hard constraints, we can follow these steps:

1. Initialize the structure as an empty 20x16 grid:
```python
structure = [[' ']*20 for _ in range(16)]
```

2. Place the base blocks to form the bottom of the structure. For stability, we can use two b11 blocks at the bottom center slots (9 and 10):
```python
structure[0][9] = 'b11'
structure[0][10] = 'b11'
```

3. Place the b31 block on top of the base blocks to form the vertical part of the "D" shape. To ensure stability, we need to place it on a solid base, so we'll use two b11 blocks below the b31 block:
```python
structure[1][8] = 'b11'
structure[1][11] = 'b11'
structure[1][9] = 'b31'
structure[1][10] = 'b31'
```

4. Place the b13 block on top of the vertical part to complete the "D" shape. Again, we'll use two b11 blocks below the b13 block for stability:
```python
structure[2][9] = 'b11'
structure[3][9] = 'b11'
structure[2][10] = 'b13'
structure[3][10] = 'b13'
```

5. Finally, use the ab_drop() function to place the remaining blocks in suitable positions to meet the stability and boundary intrusion constraints:
```python
ab_drop('b13', 6)  # Place b13 block on the left side
ab_drop('b13', 14)  # Place b13 block on the right side
ab_drop('b11', 6)  # Place b11 block on the left side
ab_drop('b11', 14)  # Place b11 block on the right side
ab_drop('b31', 8)  # Place b31 block on the left side
ab_drop('b31', 11)  # Place b31 block on the right side
ab_drop('b31', 9)  # Place b31 block on the top center
```

The resulting structure will resemble the character "D" and satisfy all the given constraints. The code provided here is just an example, and the actual positions and orders for dropping the blocks may vary to achieve a stable structure.