To generate a stable structure that looks like the character "X" and meets all the given constraints, we can use the `ab_drop()` function to drop the blocks in a strategic order.

First, we need to drop the two diagonal blocks (b13) at the center of the structure. We can calculate the slot positions for the center blocks by finding the middle slot position using the formula `(W-1)/2` and decrementing it by 1 and incrementing it by 1 to get the left and right slots respectively. We can then use the `ab_drop()` function to drop the b13 blocks at these slot positions.

Next, we need to drop the horizontal blocks (b31) on top of the diagonal blocks. We can calculate the slot positions for these blocks by finding the middle slot position using the formula `(W-1)/2` and subtracting 1 from it for the left slot position and adding 1 to it for the right slot position. We can then use the `ab_drop()` function to drop the b31 blocks at these slot positions.

Here is an example code snippet that generates the desired structure:

```python
W = 20
H = 16
structure = [[' '] * W for _ in range(H)]

def ab_drop(block_type, x_position):
    # ... implementation of ab_drop function ...

# Drop the two diagonal blocks (b13)
center_slot = (W-1)//2
left_slot = center_slot - 1
right_slot = center_slot + 1
ab_drop('b13', left_slot)
ab_drop('b13', right_slot)

# Drop the horizontal blocks (b31)
ab_drop('b31', left_slot)
ab_drop('b31', right_slot)
```

By following this order of dropping blocks and selecting appropriate slot positions, we can generate a stable structure that looks like the character "X" and meets all the given constraints.