To form a shape resembling the letter "T", we can use the following steps:

1. Initialize the map as an empty field with all cells set to zero.

2. Place the b11 brick on the ground at the x_position of 9 using ab_drop('b11', 9).

3. Place the b31 brick above the b11 brick, centered horizontally, and with the lower left cell at (9, 1). Using ab_drop('b31', 9) will place the brick at the x_position of 9, and the brick will drop down until it reaches either the ground or the b11 brick.

4. Place the b31 brick above the b11 brick, centered horizontally, and with the lower left cell at (9, 2). Using ab_drop('b31', 9) will generate the brick at the x_position of 9, and the brick will drop down until it reaches the b31 brick below.

Here is the code to generate the required structure:

```python
# Map initialization
width = 20
height = 16
map = [[0 for _ in range(width)] for _ in range(height)]

# Function to check if a brick can be placed at the given position
def can_place_brick(brick, x_position):
    for i in range(brick[1]):
        for j in range(brick[0]):
            if map[height - 1 - i][x_position + j] != 0:
                return False
    return True

# Function to place a brick at the given position
def place_brick(brick, x_position):
    for i in range(brick[1]):
        for j in range(brick[0]):
            map[height - 1 - i][x_position + j] = 1

# Place the b11 brick on the ground at x_position=9
ab_drop('b11', 9)

# Place the b31 brick above the b11 brick at x_position=9 and y=1
ab_drop('b31', 9)

# Place the b31 brick above the b11 brick at x_position=9 and y=2
ab_drop('b31', 9)

# Displaying the final map
for row in map:
    print(row)
```

Please note that the above code assumes that the `ab_drop()` function will be implemented separately, as mentioned in the notes. The code only includes the logic for placing bricks on the field.