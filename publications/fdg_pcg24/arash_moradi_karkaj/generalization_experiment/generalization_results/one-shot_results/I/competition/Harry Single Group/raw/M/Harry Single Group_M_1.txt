To form the shape resembling the letter "M", we can generate and place the bricks in the following order:

1. Place the b31 brick at x_position = 8: `ab_drop('b31', 8)`
2. Place the b11 brick above the left side of the b31 brick at x_position = 6: `ab_drop('b11', 6)`
3. Place the b11 brick above the right side of the b31 brick at x_position = 10: `ab_drop('b11', 10)`
4. Place the b13 brick above the left side of the b11 brick at x_position = 5: `ab_drop('b13', 5)`
5. Place the b13 brick above the right side of the b11 brick at x_position = 11: `ab_drop('b13', 11)`

Here is the code to generate the required structure:

```python
# Initialize the field
field = [[0 for _ in range(20)] for _ in range(16)]

# Function to check if a given position in the field is occupied
def is_occupied(x, y):
    return field[y][x] == 1

# Function to place a brick in the field
def place_brick(x, y, brick):
    for i in range(brick['height']):
        for j in range(brick['width']):
            field[y+i][x+j] = 1

# Function to check if a structure is stable
def is_stable():
    for y in range(1, 16):
        contact_points = []
        for x in range(20):
            if is_occupied(x, y) and (not is_occupied(x, y-1)):
                contact_points.append(x)
        if len(contact_points) != 2 or (contact_points[1] - contact_points[0] != 2):
            return False
    return True

# Define the properties of the bricks
b31 = {'width': 3, 'height': 1}
b13 = {'width': 1, 'height': 3}
b11 = {'width': 1, 'height': 1}

# Define the ab_drop function
def ab_drop(x, y):
    if x == 'b31':
        brick = b31
    elif x == 'b13':
        brick = b13
    elif x == 'b11':
        brick = b11
    else:
        return

    # Check if the current position is already occupied
    if is_occupied(y, 0):
        return

    # Check for boundary collision
    if y + brick['width'] > 20:
        return

    # Drop the brick
    for i in range(16):
        if i == 0 or is_occupied(y, i-1):
            if i + brick['height'] > 16 or any(is_occupied(y+j, i) for j in range(brick['height'])):
                place_brick(y, i-1, brick)
                break

# Generate the required structure
ab_drop('b31', 8)
ab_drop('b11', 6)
ab_drop('b11', 10)
ab_drop('b13', 5)
ab_drop('b13', 11)

# Output the field
for row in field:
    print(''.join(str(cell) for cell in row))
```

This code will generate the following field:

```
00000000000000000000
00000000000000000000
00000000000000000000
00000000000000000000
00000000000000000000
00000000000000000000
00000000000000000000
00000000000000000000
00000000000000000000
00000000000011000000
00000000000011000000
00000000001111100000
00000000001111100000
00000000001111100000
00000000001111100000
00000000000000000000
```

The occupied cells in the field form a shape resembling the letter "M" with stable structures.