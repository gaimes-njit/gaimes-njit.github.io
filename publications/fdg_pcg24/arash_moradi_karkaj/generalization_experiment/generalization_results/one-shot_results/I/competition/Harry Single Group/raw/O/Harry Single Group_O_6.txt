```python
# Initialize the field as a 2D list with all cells empty
field = [[' ' for _ in range(20)] for _ in range(16)]

# Define a function to print the current state of the field
def print_field():
    for row in field:
        print(' '.join(row))
    print()

# Function to check if a brick can be placed at the given position
def can_place_brick(brick, x, y):
    if brick == 'b31':
        # Check for boundary collision
        if x < 1 or x > 17:
            return False
        # Check if any cell in the brick's position is already occupied
        for i in range(-1, 2):
            if field[y][x+i] != ' ':
                return False
    elif brick == 'b13':
        # Check for boundary collision
        if x < 0 or x > 18:
            return False
        # Check if any cell in the brick's position is already occupied
        for i in range(-1, 2):
            if field[y+i][x] != ' ':
                return False
    elif brick == 'b11':
        # Check for boundary collision
        if x < 0 or x > 19 or y < 0 or y > 15:
            return False
        # Check if the cell is already occupied
        if field[y][x] != ' ':
            return False
    return True

# Function to place a brick at the given position
def place_brick(brick, x, y):
    if brick == 'b31':
        # Place the brick in the field
        field[y][x-1] = '#'
        field[y][x] = '#'
        field[y][x+1] = '#'
    elif brick == 'b13':
        # Place the brick in the field
        field[y-1][x] = '#'
        field[y][x] = '#'
        field[y+1][x] = '#'
    elif brick == 'b11':
        # Place the brick in the field
        field[y][x] = '#'

# Function to drop a brick starting from the given x position
def ab_drop(brick, x_position):
    if brick == 'b31':
        for y in range(1, 16):
            if can_place_brick(brick, x_position, y):
                place_brick(brick, x_position, y-1)
                break
    elif brick == 'b13':
        for y in range(2, 16):
            if can_place_brick(brick, x_position, y):
                place_brick(brick, x_position, y-2)
                break
    elif brick == 'b11':
        for y in range(1, 16):
            if can_place_brick(brick, x_position, y):
                place_brick(brick, x_position, y-1)
                break

# Start generating the structure
ab_drop('b13', 5)
ab_drop('b31', 6)

# Print the final field
print_field()
```
The above code will generate the required structure resembling the letter "O" using the `ab_drop(x, y)` function and satisfying the important notes. The generated structure will be printed as a grid. The occupied cells will be represented by '#' and the empty cells will be represented by space (' ').