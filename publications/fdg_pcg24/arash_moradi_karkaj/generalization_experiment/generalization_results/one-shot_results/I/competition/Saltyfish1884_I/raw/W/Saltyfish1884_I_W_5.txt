To generate a structure that resembles the character "W" while meeting all hard constraints, we need to carefully determine the dropping position and order of the blocks. Let's break down the steps:

1. Initialize the structure as an empty grid:
```python
structure = [[' ']*W for _ in range(H)]
```

2. Determine the dropping positions for each block to form the structure.
   - Start from the bottom and work our way up.
   - Place the blocks in a way that maintains stability and does not separate the structure.

3. Determine the dropping position for the first b31 block.
   - Since the block must be placed on a solid base, it should be dropped at the bottom layer (layer 0) with its center aligned to slot 1.
   - Use the `ab_drop()` function to drop the block:
   ```python
   ab_drop('b31', 1)
   ```

4. Determine the dropping position for the second b13 block.
   - It should be dropped on top of the first block (layer 1) to maintain stability and prevent overhangs.
   - Align the block's center with slot 1.
   ```python
   ab_drop('b13', 1)
   ```

5. Determine the dropping position for the third b31 block.
   - It should be dropped on top of the second block (layer 2) to maintain stability and prevent overhangs.
   - Align the block's center with slot 1.
   ```python
   ab_drop('b31', 1)
   ```

6. The structure will now resemble the character "W" when viewed from above.

The final Python code to generate the "W" structure will be:
```python
ab_drop('b31', 1)
ab_drop('b13', 1)
ab_drop('b31', 1)
```

Note: The exact dropping positions and order may vary depending on the specific requirements and constraints of the problem. It is important to carefully analyze the stability and boundary intrusion constraints to find a suitable solution.