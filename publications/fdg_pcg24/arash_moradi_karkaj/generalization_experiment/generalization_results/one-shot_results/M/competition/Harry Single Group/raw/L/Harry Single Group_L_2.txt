First, let's initialize the field and set up the stability and boundary collision checks.

```python
field = [[0 for _ in range(20)] for _ in range(16)]

def is_valid_position(x, y):
    if y < 0 or y > 15 or x < 0 or x > 19:  # Check if position is within field boundaries
        return False
    
    if field[y][x] != 0:  # Check if position is already occupied
        return False
    
    return True

def is_stable(x, y, brick):
    if brick == 'b13':
        if x > 0 and field[y-1][x-1] == 0:  # Check if the left side of the pivot is stable
            return False
        if x < 19 and field[y-1][x+1] == 0:  # Check if the right side of the pivot is stable
            return False
    elif brick == 'b31':
        if x > 0 and field[y-1][x-1] == 0:  # Check if the left side of the pivot is stable
            return False
        if x+2 < 20 and field[y-1][x+2] == 0:  # Check if the right side of the pivot is stable
            return False
    
    return True
```

Now, let's create a function to drop bricks on the field. We will start by defining the structure of the letter "L" using the provided bricks: b13 and b31.

```python
def generate_L_shape():
    # Drop b13 brick
    ab_drop('b13', 5)  # Start at x-position 5
    
    # Drop b31 brick
    ab_drop('b31', 6)  # Start at x-position 6
```

Finally, let's implement the `ab_drop` function. We will do a continuous descent of the brick, checking for validity and stability at each position until it either lands on the ground or stops above an occupied cell.

```python
def ab_drop(brick, x_position):
    x = x_position
    y = 15  # Start at the top of the field and move downwards
    
    while True:
        if not is_valid_position(x, y):  # Check if current position is valid
            break
        
        if not is_stable(x, y, brick):  # Check if current position is stable
            break
        
        y -= 1  # Move downwards
        
    # Place the brick at the valid/stable position
    if brick == 'b13':
        field[y+1][x] = 1
        field[y+1][x] = 1
        field[y+2][x] = 1
    elif brick == 'b31':
        field[y+1][x-1] = 1
        field[y+1][x] = 1
        field[y+1][x+1] = 1
```

Now we can call the `generate_L_shape` function to create the L-shaped structure resembling the letter "L" on the field.

```python
generate_L_shape()
```

The resulting field should have the cells (5, 0), (5, 1), (5, 2), (5, 3), (6, 3), and (7, 3) occupied.