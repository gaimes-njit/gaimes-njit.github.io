```python
# Initialize map
map = [[0 for _ in range(20)] for _ in range(16)]

# Function to check if dropping brick at position (x, y) will exceed field boundaries
def check_boundary(x, y):
    if x < 0 or x >= 20 or y < 0 or y >= 16:
        return False
    return True

# Function to check stability of bricks
def check_stability():
    for i in range(16):
        for j in range(20):
            if map[i][j] != 0:
                # Check stability for b13 brick
                if map[i][j] == 1 and 0 <= i+1 < 16 and map[i+1][j] == 1:
                    # Check if left side has more occupied cells than right side
                    left_count = 0
                    right_count = 0
                    if 0 <= j-1 < 20:
                        left_count = len([1 for k in range(i+1, 16) if map[k][j-1] == 1])
                    if 0 <= j+1 < 20:
                        right_count = len([1 for k in range(i+1, 16) if map[k][j+1] == 1])
                    if left_count != right_count:
                        return False
    return True

# Function to drop bricks
def ab_drop(x, y):
    if x == 'b31':
        brick = [(y-1, 0), (y, 0), (y+1, 0)]
    elif x == 'b13':
        brick = [(y, 0), (y, 1), (y, 2)]
    elif x == 'b11':
        brick = [(y, 0)]
    
    for cell in brick:
        if not check_boundary(cell[0], cell[1]):
            return

    for cell in brick:
        map[cell[1]][cell[0]] = 1
    
    while True:
        stop = False
        for cell in brick:
            if cell[1] == 15 or map[cell[1]+1][cell[0]] == 1:
                stop = True
                break
        if stop:
            break
        for cell in brick:
            map[cell[1]][cell[0]] = 0
            cell = (cell[0], cell[1]+1)
            map[cell[1]][cell[0]] = 1
    
    if check_stability():
        return

# Generate the Y shape
ab_drop('b13', 5)
ab_drop('b31', 6)
ab_drop('b11', 7)
ab_drop('b11', 7)
ab_drop('b31', 8)
ab_drop('b13', 9)
ab_drop('b13', 8)
ab_drop('b13', 7)
ab_drop('b31', 6)

# Display the generated map
for row in map:
    print(row)
```

This code will generate the Y shape using the provided functions and props, while ensuring stability and avoiding boundary collisions.