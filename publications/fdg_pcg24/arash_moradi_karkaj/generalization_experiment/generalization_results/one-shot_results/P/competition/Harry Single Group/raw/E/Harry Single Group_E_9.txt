To generate the required structure resembling the letter "E" while satisfying the important notes, I will provide a step-by-step solution.

1. Map Initialization:
We will initialize a 2D list representing the field and set all cells to 0 initially.
```python
map = [[0]*20 for _ in range(16)]
```

2. Placing the bricks:
To form the letter "E", we will need to place a total of 6 bricks - 2 vertical bricks and 4 horizontal bricks.

- First, we will place the two vertical bricks (b13) on the left side of the "E":
```python
ab_drop('b13', 1)  # Place the first vertical brick at x_position = 1
ab_drop('b13', 2)  # Place the second vertical brick at x_position = 2
```

- Next, we will place the four horizontal bricks (b31) to complete the horizontal segments of the "E":
```python
ab_drop('b31', 1)  # Place the first horizontal brick at x_position = 1
ab_drop('b31', 2)  # Place the second horizontal brick at x_position = 2
ab_drop('b31', 3)  # Place the third horizontal brick at x_position = 3
ab_drop('b31', 4)  # Place the fourth horizontal brick at x_position = 4
```

3. Checking stability:
To ensure the stability of the bricks, we need to check the number of occupied cells on the left and right sides of the pivot (contact point). In this case, we can examine the stability by checking the number of occupied cells on the left and right sides of the pivot for each vertical brick (b13).

For the first vertical brick at x_position = 1 (pivot at (1, 0)), we need to check the stability with the bricks above it (in this case, there are no other bricks). Since there are no bricks on the left or right sides of the pivot, the structure is stable.

For the second vertical brick at x_position = 2 (pivot at (2, 0)), we need to check the stability with the bricks above it (in this case, the first vertical brick at (1, 0), (1, 1), and (1, 2)). Since the number of occupied cells on the left and right sides of the pivot (2 cells each) is equal, the structure is stable.

Therefore, the structure formed by placing the bricks satisfies the stability requirement.

4. Avoiding boundary collisions:
When placing the bricks, we need to ensure that the occupied cells of the bricks do not exceed the boundaries of the field. In this case, the field has a width of 20 and a height of 16, so we need to make sure that the x_positions and y-positions of the bricks are within the valid range.

The given placements of the bricks (b13 and b31) do not exceed the boundaries of the field, so no boundary collisions occur.

5. Final Solution:
The final solution for generating the required structure resembling the letter "E" while satisfying the important notes is as follows:
```python
map = [[0]*20 for _ in range(16)]  # Map initialization

ab_drop('b13', 1)  # Place the first vertical brick at x_position = 1
ab_drop('b13', 2)  # Place the second vertical brick at x_position = 2

ab_drop('b31', 1)  # Place the first horizontal brick at x_position = 1
ab_drop('b31', 2)  # Place the second horizontal brick at x_position = 2
ab_drop('b31', 3)  # Place the third horizontal brick at x_position = 3
ab_drop('b31', 4)  # Place the fourth horizontal brick at x_position = 4
```
After executing this solution, the "E" structure will be formed on the field as specified, and all the important notes will be satisfied.