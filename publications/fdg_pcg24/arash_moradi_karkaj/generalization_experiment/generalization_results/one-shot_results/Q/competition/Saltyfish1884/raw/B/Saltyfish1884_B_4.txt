To generate a stable structure that resembles the character "B", we will follow these steps:

1. Consider the constraints:
   a. Stability: Place b31 block on a solid base (b11 or b13 blocks), place blocks as low as possible, and ensure the structure is not separated.
   b. No boundary intrusion: Avoid blocks intruding on the boundaries of the map.

2. Determine the shape of the structure:
   The character "B" can be represented using b11, b31, and b13 blocks. One possible structure is:
   - Bottom row: b11
   - Second row: b31
   - Third row: b11
   - Fourth row: b31
   - Fifth row: b11
   - Sixth row: b11

3. Initialize the grid:
   Use the provided code to initialize the structure grid as an empty WxH grid.

4. Use the ab_drop() function to place the blocks:
   Start from the bottom row and proceed upwards. Place the blocks sequentially using the ab_drop() function, taking care to satisfy the stability and boundary intrusion constraints.

Here's the updated code to generate a structure resembling the character "B":

```python
W = 20 # Width of the map
H = 16 # Height of the map

# Initialize the structure as an empty WxH grid
structure = [[' ']*W for _ in range(H)]

def ab_drop(x, y):
    # (existing code)

# Define the structure resembling the character "B"
blocks = [
    ('b11', 0),          # Bottom row
    ('b31', 1),          # Second row
    ('b11', 1),
    ('b31', 2),          # Third row
    ('b11', 2),
    ('b31', 3),          # Fourth row
    ('b11', 3),
    ('b11', 4),          # Fifth row
    ('b11', 5)           # Sixth row
]

# Drop the blocks sequentially and update the structure grid
for block in blocks:
    ab_drop(block[0], block[1])

# Print the resulting structure
for row in structure:
    print(' '.join(row))
```

The resulting structure will resemble the character "B" and satisfy the stability and boundary intrusion constraints. Note that this is just one possible arrangement that meets the requirements, and other arrangements may also be valid.