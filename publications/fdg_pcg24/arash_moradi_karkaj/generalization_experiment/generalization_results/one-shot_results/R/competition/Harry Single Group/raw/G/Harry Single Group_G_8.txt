```python
# Map initialization
field = [[0 for _ in range(20)] for _ in range(16)]


# Function to check stability of a brick
def is_stable(brick):
    pivot = brick[0]
    left = right = 0
    for cell in brick:
        if cell == (pivot[0] - 1, pivot[1]):
            left += 1
        elif cell == (pivot[0] + 1, pivot[1]):
            right += 1
    return left == right


# Function to place a brick on the field
def place_brick(brick):
    for cell in brick:
        x, y = cell
        field[y][x] = 1


# Function to check if a brick will collide with the boundary or other bricks
def is_valid(brick):
    for cell in brick:
        x, y = cell
        if x < 0 or x >= 20:
            return False
        if y < 0 or y >= 16:
            return False
        if field[y][x] == 1:
            return False
    return True


# Function to drop a brick on the field
def ab_drop(x, y):
    if x == 'b31':
        brick = [(y, 15), (y-1, 15), (y+1, 15)]
    elif x == 'b13':
        brick = [(y, 15), (y, 14), (y, 13)]
    elif x == 'b11':
        brick = [(y, 15)]
    
    while True:
        if not is_valid(brick):
            break
        if y <= 0:
            break
        y -= 1
        new_brick = [(cell[0], y) for cell in brick]
        if not is_valid(new_brick):
            break
        brick = new_brick
    
    place_brick(brick)


# Starting position to generate 'G' shape
x_pos = 8

# Generate the 'G' shape
ab_drop('b13', x_pos)
ab_drop('b13', x_pos-1)
ab_drop('b13', x_pos-2)
ab_drop('b11', x_pos)
ab_drop('b11', x_pos-2)
ab_drop('b31', x_pos-2)
ab_drop('b31', x_pos-5)
ab_drop('b31', x_pos-5)
ab_drop('b11', x_pos-8)
ab_drop('b13', x_pos-8)
ab_drop('b13', x_pos-9)
ab_drop('b13', x_pos-10)
ab_drop('b11', x_pos-8)
ab_drop('b11', x_pos-10)
ab_drop('b11', x_pos-11)
ab_drop('b31', x_pos-10)
ab_drop('b31', x_pos-13)
ab_drop('b31', x_pos-10)
ab_drop('b31', x_pos-13)
ab_drop('b31', x_pos-16)
ab_drop('b31', x_pos-16)
ab_drop('b31', x_pos-16)

# Print the field
for row in field:
    print(row)
```