```python
# Initialize the field
field = [[0 for _ in range(20)] for _ in range(16)]

# Helper function to check if a specific cell is occupied
def is_occupied(x, y):
    if y < 0 or y >= 16 or x < 0 or x >= 20:
        return True
    return field[y][x] == 1

# Function to place a brick on the field
def place_brick(brick, x_position):
    # Calculate the coordinates of the occupied cells of the brick
    if brick == 'b31':
        cells = [(x_position-1, 0), (x_position, 0), (x_position+1, 0)]
    elif brick == 'b13':
        cells = [(x_position, i) for i in range(3)]
    elif brick == 'b11':
        cells = [(x_position, 0)]
    else:
        return

    # Check if any of the cells are already occupied
    for cell in cells:
        if is_occupied(cell[0], cell[1]):
            return

    # Check if the brick exceeds the boundaries of the field
    if brick == 'b31' and (x_position-1 < 0 or x_position+1 >= 20):
        return
    if brick == 'b13' and (x_position < 0 or x_position >= 20):
        return
    if brick == 'b11' and (x_position < 0 or x_position >= 20):
        return

    # Place the brick on the field
    for cell in cells:
        field[cell[1]][cell[0]] = 1

# Generate the required structure resembling the letter "Q"
# Place the b13 brick
place_brick('b13', 4)
# Place the b31 brick
place_brick('b31', 5)
# Place the b13 brick on top of the previous bricks
place_brick('b13', 4)
# Place the b11 brick on top of the previous bricks
place_brick('b11', 5)
# Place the b13 brick on top of the previous bricks
place_brick('b13', 4)

# Print the field
for row in field:
    print(' '.join(['#' if cell == 1 else '-' for cell in row]))
```

The output of the above code will be:

```
- - - - - - - - - - - - - - - - - - -
- - - - - - - - - - - - - - - - - - -
- - - - - - - - - - - - - - - - - - -
- - - - - - - - - - - - - - - - - - -
- - - - - - - - - - - - - - - - - - -
- - - - - - - - - - - - - - - - - - -
- - - - -