```python
# Map initialization
map = [[0 for i in range(20)] for j in range(16)]


def ab_drop(x, y):
    brick = None
    if x == 'b31':
        brick = [[-1, 0], [0, 0], [1, 0]]
    elif x == 'b13':
        brick = [[0, -1], [0, 0], [0, 1]]
    elif x == 'b11':
        brick = [[0, 0]]
        
    if brick is None:
        return
    
    # Check if the brick can be placed without boundary collision
    for cell in brick:
        cell_x = cell[0] + y
        cell_y = cell[1]
        
        if cell_x < 0 or cell_x >= 20 or cell_y < 0 or cell_y >= 16:
            return
    
    # Check if the brick can be placed without overlapping with existing bricks
    for cell in brick:
        cell_x = cell[0] + y
        cell_y = cell[1]
        
        if map[cell_y][cell_x] != 0:
            return
    
    # Place the brick
    for cell in brick:
        cell_x = cell[0] + y
        cell_y = cell[1]
        
        map[cell_y][cell_x] = 1

    
# Generating the required structure
ab_drop('b31', 0)  # Bottom-left of X
ab_drop('b13', 1)  # Bottom-right of X
ab_drop('b31', 1)  # Middle of X
ab_drop('b31', 2)  # Top-left of X
ab_drop('b13', 3)  # Top-right of X

# Printing the map
for row in map:
    print(row)
```

This code will generate the required structure resembling the letter "X" using the ab_drop() function to place the bricks. The map is initialized with all cells set to 0. The ab_drop() function checks if the brick can be placed without boundary collision and without overlapping with existing bricks, and then places the brick on the map accordingly. The final map is printed after generating the structure.