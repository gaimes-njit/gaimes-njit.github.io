```
# Map initialization
map = [[0 for _ in range(20)] for _ in range(16)]

# Function to check if a cell is within the boundaries of the field
def is_within_boundaries(x, y):
    return 0 <= x < 20 and 0 <= y < 16

# Function to check if a cell is occupied
def is_occupied(x, y):
    return map[y][x] == 1

# Function to place a brick on the field
def place_brick(x, y, brick):
    for i in range(brick["height"]):
        for j in range(brick["width"]):
            map[y+i][x+j] = 1

# Function to check if a brick is stable
def is_stable(x, y, brick):
    pivot_x = x + brick["pivot_x"]
    pivot_y = y + brick["pivot_y"]

    left_cells = 0
    right_cells = 0

    for i in range(y, pivot_y):
        for j in range(x, pivot_x):
            if is_occupied(j, i):
                left_cells += 1

    for i in range(y, pivot_y):
        for j in range(pivot_x + 1, x + brick["width"]):
            if is_occupied(j, i):
                right_cells += 1

    return left_cells == right_cells

# Function to drop a brick on the field
def ab_drop(brick_type, x_position):
    if brick_type == 'b31':
        brick = {
            "width": 3,
            "height": 1,
            "pivot_x": 1,
            "pivot_y": 0
        }
    elif brick_type == 'b13':
        brick = {
            "width": 1,
            "height": 3,
            "pivot_x": 0,
            "pivot_y": 1
        }
    elif brick_type == 'b11':
        brick = {
            "width": 1,
            "height": 1,
            "pivot_x": 0,
            "pivot_y": 0
        }
    else:
        return

    x = x_position
    y = 15

    while True:
        if not is_within_boundaries(x, y):
            return

        if is_occupied(x, y - 1):
            break

        y -= 1

    if brick_type == 'b31':
        for i in range(3):
            if is_occupied(x - 1, y + i):
                return
        place_brick(x - 1, y, brick)
    else:
        for i in range(brick["height"]):
            if is_occupied(x, y + i):
                return
        place_brick(x, y, brick)

# Generate the required structure

# First, drop the b13 brick at x_position 5
ab_drop('b13', 5)

# Next, drop the b31 brick at x_position 6
ab_drop('b31', 6)

# Finally, drop another b13 brick at x_position 5
ab_drop('b13', 5)

# Print the field for visualization
for row in map:
    print(row)

```

The generated structure will resemble the letter "H".