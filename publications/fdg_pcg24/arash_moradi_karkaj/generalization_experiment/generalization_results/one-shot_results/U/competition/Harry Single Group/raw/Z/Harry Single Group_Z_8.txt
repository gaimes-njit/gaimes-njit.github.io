```
# map initialization
map = [[False for _ in range(20)] for _ in range(16)]

# function to check if a cell is occupied
def is_occupied(x, y):
    if x < 0 or x >= 20 or y < 0 or y >= 16:
        return True
    return map[y][x]

# function to place a brick on the field
def place_brick(x, y, brick):
    if brick == 'b31':
        map[y][x-1] = True
        map[y][x] = True
        map[y][x+1] = True
    elif brick == 'b13':
        map[y][x] = True
        map[y+1][x] = True
        map[y+2][x] = True
    elif brick == 'b11':
        map[y][x] = True

# function to check stability
def is_stable(x, y, brick):
    if brick == 'b31':
        left_count = 0
        right_count = 0
        for i in range(y, 0, -1):
            if is_occupied(x-1, i):
                left_count += 1
            if is_occupied(x+1, i):
                right_count += 1
        return left_count == right_count
    return True

# function to drop a brick
def ab_drop(brick, x_position):
    x = x_position
    y = 15
    while y >= 0 and not is_occupied(x, y):
        y -= 1
    y += 1

    if brick == 'b31':
        while not is_occupied(x-1, y) and not is_occupied(x, y) and not is_occupied(x+1, y) and is_stable(x, y, brick):
            place_brick(x, y, brick)
            y -= 1
    elif brick == 'b13':
        while not is_occupied(x, y) and not is_occupied(x, y+1) and not is_occupied(x, y+2) and is_stable(x, y, brick):
            place_brick(x, y, brick)
            y -= 1
    elif brick == 'b11':
        if not is_occupied(x, y) and is_stable(x, y, brick):
            place_brick(x, y, brick)

# generate the shape resembling the letter "Z"
ab_drop('b13', 5)
ab_drop('b31', 6)
ab_drop('b31', 10)
ab_drop('b13', 11)

# print the resulting map
for row in map:
    print(row)
```