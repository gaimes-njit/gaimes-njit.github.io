To generate a structure resembling the letter "J", we can use the following code:

```python
# Map initialization
field = [[0]*20 for _ in range(16)]

# Function to check stability
def is_stable():
    for y in range(15):
        for x in range(19):
            if field[y][x] == 1 and field[y+1][x] != field[y][x]:
                return False
    return True

# Function to place bricks
def place_brick(x, y, brick):
    if brick == 'b13':
        for i in range(3):
            field[y+i][x] = 1
    elif brick == 'b31':
        for i in range(3):
            field[y][x+i] = 1

# Drop the first brick vertically
ab_drop('b13', 5)

# Check stability and correct if necessary
if not is_stable():
    for i in range(5):
        field[2][i] = 0
        field[3][i] = 0
    ab_drop('b13', 5)

# Drop the second brick horizontally
ab_drop('b31', 6)

# Check stability and correct if necessary
if not is_stable():
    for i in range(3):
        field[2][i+5] = 0
    ab_drop('b31', 6)

# Print the resulting structure
for row in field:
    print(row)
```

This code first initializes the field, and then defines a function to check the stability of the placed bricks. The `place_brick()` function is used to place the bricks on the field based on their type. 

The code then uses the `ab_drop()` function to drop the first brick ('b13') vertically at position (5,0). After each brick placement, the stability is checked using the `is_stable()` function. If the structure is not stable, the code corrects it by removing the incorrectly placed bricks and dropping the brick again.

The second brick ('b31') is then dropped horizontally at position (6,3) following the same process of checking and correcting stability.

Finally, the resulting field is printed to show the structure resembling the letter "J".