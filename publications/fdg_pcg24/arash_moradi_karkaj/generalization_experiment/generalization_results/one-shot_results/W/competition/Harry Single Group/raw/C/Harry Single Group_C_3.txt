To form the shape resembling the letter "C" using the available props, we need to strategically place the bricks on the field. Here's an example code to generate the required structure:

```
# Initializing the field
field = [[0 for _ in range(20)] for _ in range(16)]

# Function to check if a position is valid
def is_valid_position(x, y):
    # Check if position is within field boundaries
    if x < 0 or x >= 20 or y < 0 or y >= 16:
        return False
    # Check if position is already occupied
    if field[y][x] == 1:
        return False
    return True

# Function to update the field with a placed brick
def update_field(x, y, brick):
    if brick == 'b11':
        field[y][x] = 1
    elif brick == 'b13':
        field[y][x] = 1
        field[y+1][x] = 1
        field[y+2][x] = 1
    elif brick == 'b31':
        field[y][x] = 1
        field[y][x+1] = 1
        field[y][x+2] = 1

# Function to drop a brick and update the field accordingly
def ab_drop(x, y):
    if x == 'b11':
        for i in range(y, 16):
            if is_valid_position(y, i):
                update_field(y, i, x)
                return
    elif x == 'b13':
        for i in range(y, 16):
            if is_valid_position(y, i) and is_valid_position(y+1, i) and is_valid_position(y+2, i):
                update_field(y, i, x)
                update_field(y+1, i, x)
                update_field(y+2, i, x)
                return
    elif x == 'b31':
        for i in range(y, 16):
            if is_valid_position(y, i) and is_valid_position(y, i+1) and is_valid_position(y, i+2):
                update_field(y, i, x)
                update_field(y, i+1, x)
                update_field(y, i+2, x)
                return

# Generating the required structure
ab_drop('b31', 4)    # Initial placement of b31 brick
ab_drop('b11', 4)
ab_drop('b11', 4)
ab_drop('b11', 4)
ab_drop('b13', 5)
ab_drop('b31', 6)

# Printing the resulting field
for row in field:
    print(row)
```

This code will first initialize the field as a 16x20 grid, with all cells set to 0 (representing empty). Then, the `is_valid_position()` function checks if a given position is within the field boundaries and is not already occupied. The `update_field()` function updates the field by placing bricks at the specified position.

The `ab_drop()` function uses a loop to drop the specified brick type at the specified x_position. It checks if the current position and the necessary adjacent positions are valid before updating the field.

Finally, the required structure is generated by calling the `ab_drop()` function multiple times with the necessary brick types and positions. The resulting field is printed to visualize the structure.

Note: The initial positions and sequence of brick placements in the example code may not result in a perfect "C" shape. Feel free to experiment with different positions and sequences to achieve the desired shape.