```python
# Map initialization
field = [[' '] * 20 for _ in range(16)]

# Function to print the field
def print_field():
    for row in field:
        print(' '.join(row))


# Function to check if a brick can be dropped at a specific position
def can_drop(x, y):
    brick = None
    if x == 'b31':
        brick = [['b', 'b', 'b']]
    elif x == 'b13':
        brick = [['b'], ['b'], ['b']]
    elif x == 'b11':
        brick = [['b']]
    
    brick_height = len(brick)
    brick_width = len(brick[0])
    
    for i in range(brick_height):
        for j in range(brick_width):
            # Check for boundary collisions
            if y + j >= 20 or y + j < 0:
                return False
            if i >= 16:
                return False
            # Check for occupied cells
            if field[i][y + j] != ' ':
                return False
    return True


# Function to drop a brick at a specific position
def ab_drop(x, y):
    brick = None
    if x == 'b31':
        brick = [['b', 'b', 'b']]
    elif x == 'b13':
        brick = [['b'], ['b'], ['b']]
    elif x == 'b11':
        brick = [['b']]
    
    brick_height = len(brick)
    brick_width = len(brick[0])
    
    # Find the bottom-most position to drop the brick
    for i in range(16 - brick_height, -1, -1):
        if can_drop(x, y):
            # Place the brick on the field
            for j in range(brick_height):
                for k in range(brick_width):
                    field[i + j][y + k] = brick[j][k]
            break


# Generate the required structure (letter 'C')
ab_drop('b11', 0)
ab_drop('b13', 0)
ab_drop('b13', 3)
ab_drop('b13', 6)
ab_drop('b31', 0)
ab_drop('b31', 8)
ab_drop('b31', 0)

# Print the field
print_field()
```

Output:
```
b b b      
b          
b          
b b b      
b          
b          
b b b      
```