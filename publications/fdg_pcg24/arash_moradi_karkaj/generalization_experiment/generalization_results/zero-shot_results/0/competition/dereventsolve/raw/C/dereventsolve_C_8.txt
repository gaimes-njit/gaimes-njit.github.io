```
def ab_drop():
    """Simulates the ab_drop function"""
    return "ab_drop"

database = {
    "top_left": "ab_drop",
    "top_middle": "ab_drop",
    "top_right": "ab_drop",
    "middle_left": "ab_drop",
    "middle_right": "ab_drop",
    "bottom_left": "ab_drop",
    "bottom_middle": "ab_drop",
}

sequence = []

def find_letter_C(database):
    """Find the letter C in the database"""
    # Check top-left corner
    if database.get("top_left") == "ab_drop":
        sequence.append(ab_drop())
        # Check top-middle
        if database.get("top_middle") == "ab_drop":
            sequence.append(ab_drop())
            # Check top-right
            if database.get("top_right") == "ab_drop":
                return sequence
    sequence.clear()  # Reset the sequence if not found in the expected pattern
    return sequence

result = find_letter_C(database)
print(result)
```

Explanation:
1. We define the `ab_drop` function which will simulate the `ab_drop` calls.
2. We create a database of key-value pairs representing the possible locations of the letter "C" in the structure.
3. We define an empty list `sequence` to store the sequence of `ab_drop` function calls.
4. The `find_letter_C` function takes the database as input and searches for the letter "C" in the specific pattern. It first checks the top-left corner, then the top-middle, and finally the top-right corner. If the pattern is found, it returns the sequence. If not, it clears the sequence and returns an empty list.
5. We call the `find_letter_C` function with the given database.
6. The `result` variable will contain the sequence of `ab_drop` calls if the letter "C" is found in the expected pattern, otherwise it will be an empty list.
7. We print the `result`.