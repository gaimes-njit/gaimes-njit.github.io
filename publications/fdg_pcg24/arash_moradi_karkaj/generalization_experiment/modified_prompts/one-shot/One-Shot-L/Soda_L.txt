You are a player of the Tetris game who aims to generate a structure in a level that looks like a capital character <OBJECT> (TARGET). Dropping position and order are crucial, and they must be determined using techniques in the block-stacking problem e.g. structures should be built in a bottom-to-top fashion. In other words, the upper blocks should be placed after the base blocks.

1. Level
A structure is situated on a 2D grid with a width (W) of 20 columns and a height (H) of 16 rows. The grid consists of 320 cells, each of equal size. Coordinate (x, y) is used to represent the positions in the grid, where x and y show the horizontal and vertical indices of cells, respectively. For example, (0, 0) denotes the bottom-left corner cell of the grid, and (W-1, H-1) is the top-right corner cell. A cell on the grid has a size of 1 * 1. Each cell has unique (x, y) coordinates associated with it.

2. Tool
The ab_drop(block_type, x_position) function drops a block vertically from the top and centres it at a specific slot, denoted by `x_position`. 

This function accepts two parameters:
1. block_type: a value that indicates the type of block to be placed. The possible values are string "b11", "b13", and "b31". An invalid block type will result in an ERROR.
"b11" denotes a square block whose size is 1 * 1.
"b13" denotes a column block whose size is 1 * 3.
"b31" denotes a row block whose size is 3 * 1.
2. x_position: a horizontal index of a grid cell, where 0 represents the leftmost column of the grid, and W-1 represents the rightmost column of the grid. The x_position parameter indicates the centre pivot point of the block being placed. For example, if "b31" is the only block in the level and is placed at x_position=4, it will occupy cells (3, 0), (4, 0) and (5, 0). An invalid position, like a position where a block of interest intrudes on the grid boundary, will result in an ERROR.

3. Constraints
No boundary intrusion: Blocks should not intrude on the boundary of the map. In other words, the area of intrusion regions should be zero.
Gravity: Levels work like the game Angry Birds, which enforces gravity. Every level made of blocks should be STABLE i.e. every block should be balanced and well-supported. Otherwise, unstable blocks will be pulled down by gravity until meeting structural stability.

4. Evaluation
Stability: Every block dropped is supposed to be still and won't move anyhow. 
Similarity: When the level reaches structural stability, the overall look will be matched with the TARGET character. The more similar it looks, the better quality of the implementation.

5. Hints
Orientation: The gravity's direction is fixed, but the similarity can be evaluated in different orientations. 
For characters like I, J, L, O, T, and U, we do the natural orientation (top-down). For instance, to get the letter L, we break it to two blocks namely the vertical pipe and the bottom bar:
```
# The vertical left part
ab_drop("b31", 10)
# The base
ab_drop("b13", 9)
```
To get letter J, we need a top bar, a middle pipe and the bottom tick:

For characters like C, E, F, H, P, and S, we can flip those letters anti-clock-wisely 90 degrees and recreate that formation. For instance, to get the letter E, if we use the top-down orientation: 

The level looks like E at the beginning but it will collapse to the right because the structure is not balanced and resist gravity. But if we create the lying-down letter E in the below fashion, we will have a stable but identical result to the above implementation.



The response must only explicitly include a code block with a series of ab_drop() and ENFORCE the best stability and similarity. Give the complete implementation (contains no indentation and only ab_drop() calls) in the last code block and avoid ERRORS. Let's do it step by step.

